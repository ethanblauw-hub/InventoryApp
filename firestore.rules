/**
 * @description: This ruleset enforces a strict, path-based authorization model for the PartTrack application.
 * Data is organized into top-level collections for Jobs, Work Categories, Inventory Items, and Shelf Locations.
 * BOMs are stored as subcollections under Jobs.
 *
 * @dataStructure:
 * - /jobs/{jobId}: Stores job-related information.
 * - /jobs/{jobId}/boms/{bomId}: Stores bill of materials associated with a specific job.
 * - /jobs/{jobId}/boms/{bomId}/items/{itemId}: Stores a list of items associated with a specific BOM.
 * - /workCategories/{workCategoryId}: Stores work categories for organizing BOMs.
 * - /inventoryItems/{inventoryItemId}: Stores individual inventory items.
 * - /shelfLocations/{shelfLocationId}: Stores physical shelf locations and associated inventory item IDs.
 *
 * @keySecurityDecisions:
 * - Path based rules are used to establish clear ownership.
 * - No user-specific data is stored, so there is no user authentication to handle.
 * - List operations are enabled for all collections as appropriate for the application's public read access pattern.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
	
  	function verifyContainerItem(){
    	return resource.data.partNumber != null && resource.data.quantity > 0;
    }
    
    function verifyBOM(){
    	return resource.data.jobNumber != null && resource.data.jobName != null;
    }
    /**
     * @description: Manages access to Job documents.
     * @path: /jobs/{jobId}
     * @allow: (read) Any user can read a Job document.
     * @allow: (create) Any authenticated user can create a Job document.
     * @allow: (update) Any authenticated user can update a Job document.
     * @allow: (delete) Any authenticated user can delete a Job document.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
      
      match /boms/{bomId} {
      	allow get, list: if true;
        allow create: if isSignedIn() && verifyBOM();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
        
        match /items/{itemId} {
          allow get, list: if true;
          allow create: if isSignedIn() && resource.data.partNumber != null;
          allow update: if isSignedIn() && resource != null;
          allow delete: if isSignedIn() && resource != null;
        }
      }
    }

    /**
     * @description: Manages access to WorkCategory documents.
     * @path: /workCategories/{workCategoryId}
     * @allow: (read) Any user can read a WorkCategory document.
     * @allow: (create) Any authenticated user can create a WorkCategory document, as long as there is a name.
     * @allow: (update) Any authenticated user can update a WorkCategory document.
     * @allow: (delete) Any authenticated user can delete a WorkCategory document.
     */
    match /workCategories/{workCategoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && resource.data.name != null;
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description: Manages access to InventoryItem documents.
     * @path: /inventoryItems/{inventoryItemId}
     * @allow: (read) Any user can read an InventoryItem document.
     * @allow: (create) Any authenticated user can create an InventoryItem document.
     * @allow: (update) Any authenticated user can update an InventoryItem document.
     * @allow: (delete) Any authenticated user can delete an InventoryItem document.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
    
    match /containers/{containerId} {
    	allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
      
    	match /items/{itemId} {
      	allow get, list: if true;
        allow create: if isSignedIn() && verifyContainerItem();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
      }
    }

    /**
     * @description: Manages access to ShelfLocation documents.
     * @path: /shelfLocations/{shelfLocationId}
     * @allow: (read) Any user can read a ShelfLocation document.
     * @allow: (create) Any authenticated user can create a ShelfLocation document.
     * @allow: (update) Any authenticated user can update a ShelfLocation document.
     * @allow: (delete) Any authenticated user can delete a ShelfLocation document.
     */
    match /shelfLocations/{shelfLocationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }


    function isSignedIn() {
        return request.auth != null;
    }
  }
}