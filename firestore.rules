/**
 * @fileoverview Firestore Security Rules for PartTrack.
 *
 * Core Philosophy:
 * This ruleset enforces a strict path-based ownership model and denormalizes data for authorization where needed, 
 * ensuring that only authorized users can access specific resources. Data validation is relaxed for prototyping.
 *
 * Data Structure:
 * - /jobs/{jobId}: Top-level collection for jobs.
 * - /jobs/{jobId}/boms/{bomId}: Subcollection for BOMs belonging to a job.
 * - /workCategories/{workCategoryId}: Top-level collection for work categories.
 * - /inventoryItems/{inventoryItemId}: Top-level collection for inventory items.
 * - /shelfLocations/{shelfLocationId}: Top-level collection for shelf locations, denormalized with inventory item IDs.
 *
 * Key Security Decisions:
 * - Access to BOMs is implicitly granted to users with access to the parent Job document.
 * - Listing of documents is generally allowed within the scope of access, except where explicitly denied.
 * - Data validation is minimal, focusing on relational integrity rather than comprehensive schema enforcement.
 * - Owner-only access enforced via path variables (jobId, workCategoryId, inventoryItemId, shelfLocationId).
 *
 * Denormalization for Authorization:
 * - ShelfLocation documents contain an array of inventoryItemIds, denormalizing the many-to-many relationship to simplify read operations and security rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job documents based on the job ID.
     * @path /jobs/{jobId}
     * @allow (read, write): Authenticated user can access job document if they know the jobId.
     * @deny (read, write): Unauthenticated user.
     * @principle Enforces that only authenticated users can access job documents.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to BOM documents within a specific job based on job ID and BOM ID.
     * @path /jobs/{jobId}/boms/{bomId}
     * @allow (read, write): Authenticated user can access BOM if they have access to the parent job.
     * @deny (read, write): Unauthenticated user, or authenticated user without access to the parent job.
     * @principle Enforces that access to BOMs is tied to access of the parent Job.
     */
    match /jobs/{jobId}/boms/{bomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to work category documents based on the work category ID.
     * @path /workCategories/{workCategoryId}
     * @allow (read, write): Authenticated user can access work category if they know the workCategoryId.
     * @deny (read, write): Unauthenticated user.
     * @principle Enforces that only authenticated users can access work category documents.
     */
    match /workCategories/{workCategoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to inventory item documents based on the inventory item ID.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (read, write): Authenticated user can access inventory item if they know the inventoryItemId.
     * @deny (read, write): Unauthenticated user.
     * @principle Enforces that only authenticated users can access inventory item documents.
     */
    match /inventoryItems/{inventoryItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to shelf location documents based on the shelf location ID.
     * @path /shelfLocations/{shelfLocationId}
     * @allow (read, write): Authenticated user can access shelf location if they know the shelfLocationId.
     * @deny (read, write): Unauthenticated user.
     * @principle Enforces that only authenticated users can access shelf location documents.
     */
    match /shelfLocations/{shelfLocationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}