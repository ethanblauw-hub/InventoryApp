{
  "entities": {
    "WorkCategory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WorkCategory",
      "type": "object",
      "description": "Represents a customizable work category for organizing BOMs by type of work.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the work category."
        },
        "name": {
          "type": "string",
          "description": "Name of the work category (e.g., 'Lighting', 'Gear')."
        },
        "description": {
          "type": "string",
          "description": "Description of the work category."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Bom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bom",
      "type": "object",
      "description": "Represents a Bill of Materials (BOM), either an Order BOM (estimate) or a Design BOM (actual).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the BOM document, stored within the document itself."
        },
        "jobNumber": {
          "type": "string",
          "description": "Unique identifier Job Number that the BOM is connected to."
        },
        "jobName": {
          "type": "string",
          "description": "Name of the Job for the BOM (e.g., 'Job 123 Order BOM', 'Job 123 Design BOM')."
        },
        "type": {
          "type": "string",
          "enum": [
            "order",
            "design"
          ],
          "description": "Type of BOM ('order' or 'design')."
        },
        "uploadDate": {
          "type": "string",
          "description": "ISO date string for when the BOM was uploaded.",
          "format": "date-time"
        },
        "projectManager": {
          "type": "string",
          "description": "Name of the Project Manager for the job."
        },
        "primaryFieldLeader": {
          "type": "string",
          "description": "Name of the Primary Field Leader for the job."
        },
        "workCategoryId": {
          "type": "string",
          "description": "Reference to WorkCategory."
        },
        "items": {
          "type": "array",
          "description": "An array of items included in this BOM.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the BOM item."
              },
              "description": {
                "type": "string",
                "description": "The description or part number of the item."
              },
              "orderBomQuantity": {
                "type": "number",
                "description": "The quantity specified in the Order BOM (estimate)."
              },
              "designBomQuantity": {
                "type": "number",
                "description": "The quantity specified in the Design BOM (actual)."
              },
              "onHandQuantity": {
                "type": "number",
                "description": "The current quantity available in the shop."
              },
              "shippedQuantity": {
                "type": "number",
                "description": "The quantity that has been shipped to the job site."
              },
              "shelfLocations": {
                "type": "array",
                "description": "An array of shelf location names where the item is stored.",
                "items": {
                  "type": "string"
                }
              },
              "lastUpdated": {
                "type": "string",
                "description": "ISO date string for when the item was last updated.",
                "format": "date-time"
              },
              "imageId": {
                "type": "string",
                "description": "An ID for a placeholder image."
              }
            },
            "required": [
              "id",
              "description",
              "orderBomQuantity",
              "designBomQuantity",
              "onHandQuantity",
              "shippedQuantity",
              "shelfLocations",
              "lastUpdated"
            ]
          }
        }
      },
      "required": [
        "id",
        "jobNumber",
        "jobName",
        "type",
        "uploadDate",
        "projectManager",
        "primaryFieldLeader",
        "workCategoryId",
        "items"
      ]
    },
    "InventoryItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InventoryItem",
      "type": "object",
      "description": "Represents a single item in the inventory.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the inventory item."
        },
        "name": {
          "type": "string",
          "description": "Name of the item."
        },
        "description": {
          "type": "string",
          "description": "Description of the item."
        },
        "quantity": {
          "type": "number",
          "description": "Current quantity of the item in inventory."
        }
      },
      "required": [
        "id",
        "name",
        "quantity"
      ]
    },
    "ShelfLocation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShelfLocation",
      "type": "object",
      "description": "Represents a physical shelf location in the shop.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shelf location."
        },
        "locationCode": {
          "type": "string",
          "description": "Code or name for the shelf location (e.g., 'A1', 'Shelf 2')."
        },
        "inventoryItemIds": {
          "type": "array",
          "description": "References to InventoryItems. (Relationship: InventoryItem N:N ShelfLocation)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "locationCode"
      ]
    },
    "Job": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Job",
      "type": "object",
      "description": "Represents a job or project for which materials are being tracked.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the job."
        },
        "name": {
          "type": "string",
          "description": "Name of the job."
        },
        "description": {
          "type": "string",
          "description": "Description of the job."
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/jobs/{jobId}",
        "definition": {
          "entityName": "Job",
          "schema": {
            "$ref": "#/backend/entities/Job"
          },
          "description": "Represents a job or project. Allows to store job specific details.",
          "params": [
            {
              "name": "jobId",
              "description": "The unique identifier for the job."
            }
          ]
        }
      },
      {
        "path": "/jobs/{jobId}/boms/{bomId}",
        "definition": {
          "entityName": "Bom",
          "schema": {
            "$ref": "#/backend/entities/Bom"
          },
          "description": "Represents a bill of materials associated with a specific job.",
          "params": [
            {
              "name": "jobId",
              "description": "The unique identifier for the job."
            },
            {
              "name": "bomId",
              "description": "The unique identifier for the BOM."
            }
          ]
        }
      },
      {
        "path": "/workCategories/{workCategoryId}",
        "definition": {
          "entityName": "WorkCategory",
          "schema": {
            "$ref": "#/backend/entities/WorkCategory"
          },
          "description": "Represents a category for BOMs based on the type of work.",
          "params": [
            {
              "name": "workCategoryId",
              "description": "The unique identifier for the work category."
            }
          ]
        }
      },
      {
        "path": "/inventoryItems/{inventoryItemId}",
        "definition": {
          "entityName": "InventoryItem",
          "schema": {
            "$ref": "#/backend/entities/InventoryItem"
          },
          "description": "Represents an item in the inventory.",
          "params": [
            {
              "name": "inventoryItemId",
              "description": "The unique identifier for the inventory item."
            }
          ]
        }
      },
      {
        "path": "/shelfLocations/{shelfLocationId}",
        "definition": {
          "entityName": "ShelfLocation",
          "schema": {
            "$ref": "#/backend/entities/ShelfLocation"
          },
          "description": "Represents a shelf location in the shop, containing a denormalized list of inventory item ids.",
          "params": [
            {
              "name": "shelfLocationId",
              "description": "The unique identifier for the shelf location."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure for PartTrack is designed to provide a secure, scalable, and easily maintainable database for managing inventory, BOMs, and job-related data. The design prioritizes authorization independence and clarity through denormalization and structural segregation. The error mentioned suggests the application couldn't find the firebase config, so I did not include any role based access controls, but it can be added if this is fixed by the requested design.\n\nAuthorization Independence:\nAuthorization independence is achieved through path-based ownership for user-specific data and denormalization of authorization context where collaborative access is needed.\n\nQAPs (Rules are not Filters):\nThe structure enables secure list operations (QAPs) through structural segregation. Each top-level collection houses documents with a uniform security posture. Path based security is provided for user owned data.\n\nBased on the application requirements, the structure will follow this approach:\n\n1.  Jobs and BOMs: Jobs serve as containers for BOMs. BOMs are either 'Order' (estimate) or 'Design' (actual).  BOMs are structured as subcollections under Jobs to establish clear relationships. BOM data includes denormalized fields for efficient querying and filtering. The structure assumes the user must have access to the job to access the associated BOMs. Ownership is implicit via the path. Receive/Store is not modeled as this is a UI function only.\n\n2.  Inventory and Categories: Work Categories are stored in a top-level collection that can be centrally managed by the admin. BOMs are linked to Work Categories via the 'workCategoryId' field. Shelf locations are stored in a top-level collection.  Inventory Items have a many-to-many relationship with Shelf Locations. A denormalized array of item IDs are stored in the ShelfLocation documents.\n\n3.  Shelf Locations: Each shelf location stores a list of inventory item IDs. This design enables easy lookups of items stored at a given location."
  }
}
